<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<project name="new-relic-cassandra" default="dist" basedir=".">

    <property name="version" value="1.2.0" />
    <property name="filename" value="newrelic_cassandra_plugin-${version}"/>
    <property name="jarfile" value="plugin.jar" />
    <property name="tarfile" value="${filename}.tar.gz" />

    <property name="build.dir" value="build" />
    <property name="build.classes.dir" value="${build.dir}/classes"/>
    <property name="build.jar.dir" value="${build.dir}/jar"/>
    <property name="build.tar.dir" value="${build.dir}/tar"/>
    <property name="build.tar.src.dir" value="${build.tar.dir}/${filename}"/>

    <property name="src.dir" value="src" />
    <property name="lib.dir" value="lib" />
    <property name="conf.dir" value="config" />
    <property name="dist.dir" location="dist" />

    <property name="test.dir" location="test" />
    <property name="test.lib.dir" location="test/lib" />

    <property name="sdk.jar" value="${lib.dir}/metrics_publish-2.0.1.jar" />

    <path id="classpath">
        <pathelement location="${sdk.jar}" />
    </path>

    <target name="clean">
        <echo>Cleaning project...</echo>
        <delete dir="${build.dir}" />
        <echo>Done.</echo>
    </target>

    <target name="init" depends="clean">
        <echo>Creating directory: ${build.dir}</echo>
        <mkdir dir="${build.dir}" />
    </target>

    <target name="compile" depends="init">
        <!--  Compile the java code  -->
        <echo>Building project...</echo>
        <mkdir dir="${build.classes.dir}"/>
        <javac srcdir="." destdir="${build.classes.dir}" target="1.8" source="1.8">
            <classpath refid="classpath" />
            <classpath location="${test.lib.dir}/junit-4.12.jar" />
            <classpath location="${test.lib.dir}/hamcrest-core-1.3.jar" />
            <classpath location="${test.lib.dir}/mockito-all-1.9.5.jar" />
        </javac>
        <echo>Done.</echo>
    </target>

    <target name="test" depends="compile">
        <junit printsummary="true">
            <classpath location="${test.lib.dir}/junit-4.12.jar" />
            <classpath location="${test.lib.dir}/hamcrest-core-1.3.jar" />
            <classpath location="${test.lib.dir}/mockito-all-1.9.5.jar" />
            <classpath location="${lib.dir}/metrics_publish-2.0.1.jar" />
            <classpath location="${build.classes.dir}" />
            <batchtest>
                <fileset dir="${test.dir}">
                    <include name="**/*Test*" />
                </fileset>
            </batchtest>
            <formatter type="brief" usefile="false"/>
        </junit>
    </target>

    <target name="jar" depends="compile" description="create a jar file for the application">
        <mkdir dir="${build.jar.dir}"/>
        <tstamp />
        <jar destfile="${build.jar.dir}/${jarfile}">
            <manifest>
                <attribute name="Specification-Title" value="New Relic Cassandra" />
                <attribute name="Specification-Vendor" value="New Relic, Inc." />
                <attribute name="Implementation-Vendor" value="Tyler Hoersch" />
                <attribute name="Built-Date" value="${TODAY}" />
                <attribute name="Specification-Version" value="${version}" />
                <attribute name="Implementation-Version" value="${version} ${TODAY}" />
                <attribute name="Main-Class" value="com.tylerhoersch.nr.cassandra.Main" />
            </manifest>
            <fileset dir="${build.classes.dir}"/>
            <zipfileset src="${sdk.jar}" />
        </jar>
    </target>

    <target name="dist" depends="jar" description="create a downloadable file">
        <mkdir dir="${build.tar.src.dir}" />
        <copy file="${conf.dir}/plugin.template.json" todir="${build.tar.src.dir}/config" />
        <copy file="${conf.dir}/newrelic.template.json" todir="${build.tar.src.dir}/config" />
        <copy file="LICENSE" todir="${build.tar.src.dir}" />
        <copy file="README.md" todir="${build.tar.src.dir}" />
        <copy todir="${build.tar.src.dir}/config">
            <fileset dir="${conf.dir}" />
        </copy>
        <copy file="${build.jar.dir}/${jarfile}" todir="${build.tar.src.dir}" />
        <tar compression="gzip" destfile="${dist.dir}/${tarfile}">
            <tarfileset dir="${build.tar.dir}" />
        </tar>
    </target>
</project>
